def f1(s,k):
    for i in range(0,len(s),k):
        substr=s[i:i+k]
        s1=""
        for char in substr:
            if char not in s1:
                s1 += char
        print(s1)
s,k=input(),int(input())
f1(s,k)
================================================
m = int(input())                    
a = set(map(int, input().split()))   
n = int(input())                      
b = set(map(int, input().split()))  
res = a ^ b
for i in sorted(res):
    print(i)
==============================
s = input("Enter the string: ")
w = int(input("Enter the width: "))

for i in range(0, len(s), w):
    print(s[i:i+w])
=================================
from itertools import permutations
s=input()
k=int(input())
per=sorted(permutations(s,k))
for p in per:
    print(''.join(p))
========================================
def parse_string(s):
    parts = list(filter(None, s.split("0")))
    return {"first_name": parts[0], "last_name": parts[1], "id": parts[2]}
===================================================
def find_extra_char(s1, s2):
    from collections import Counter
    return (Counter(s2) - Counter(s1)).most_common(1)[0][0]
============================================
def shadow_sentences(s1, s2):
    words1 = s1.split()
    words2 = s2.split()
    if len(words1) != len(words2):
        return False
    for w1, w2 in zip(words1, words2):
        if len(w1) != len(w2) or set(w1) & set(w2):
            return False
    return True
===============================================
def has_duplicate_letters(sentence):
    for word in sentence.split():
        if len(set(word)) < len(word):
            return True
    return False
=================================
def ascii_to_hex(s):
    return ' '.join(format(ord(c), '02x') for c in s)
==========================
def blocking_spot(a, b):
    winning_lines = [
        [0,1,2], [3,4,5], [6,7,8],
        [0,3,6], [1,4,7], [2,5,8],
        [0,4,8], [2,4,6]
    ]
    for line in winning_lines:
        if a in line and b in line:
            for pos in line:
                if pos != a and pos != b:
                    return pos
========================================
def to_morse_code(text):
    morse = {
        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',
        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',
        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
        'y': '-.--', 'z': '--..', '0': '-----', '1': '.----', '2': '..---',
        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
        '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..',
        "'": '.----.', '!': '-.-.--', ':': '---...', ' ': '/'
    }
    return ' '.join(morse[c.lower()] for c in text if c.lower() in morse)
==============================================
def has_friday_13(month, year):
    import datetime
    return datetime.date(year, month, 13).weekday() == 4
==================================
def minion_game(string):
    vowels = 'AEIOU'
    kevin = sum(len(string) - i for i in range(len(string)) if string[i] in vowels)
    stuart = sum(len(string) - i for i in range(len(string)) if string[i] not in vowels)
    if kevin > stuart:
        print("Kevin", kevin)
    elif stuart > kevin:
        print("Stuart", stuart)
    else:
        print("Draw")
=========================================