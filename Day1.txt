def f1(s,k):
    for i in range(0,len(s),k):
        substr=s[i:i+k]
        s1=""
        for char in substr:
            if char not in s1:
                s1 += char
        print(s1)
s,k=input(),int(input())
f1(s,k)
==================================
def print_rangoli(n):
    import string
    letters = string.ascii_lowercase
    lines = []

    for i in range(n):
        part = '-'.join(letters[n-1:i:-1] + letters[i:n])
        lines.append(part.center(4*n - 3, '-'))
    print('\n'.join(lines[::-1] + lines[1:]))

print_rangoli(3)
==========================================
import string

def print_rangoli(n):
    alphabets = string.ascii_lowercase
    result = []

    for i in range(n):
        left = alphabets[n-1:i:-1]
        center = alphabets[i]
        right = alphabets[i+1:n]
        row = '-'.join(left + center + right)
        result.append(row.center(4*n - 3, '-'))

    for row in result[::-1] + result[1:]:
        print(row)

# Example
n = int(input("Enter size: "))
print_rangoli(n)
==========================================

from collections import defaultdict

def group_anagrams(words):
    res = defaultdict(list)
    for word in words:
        res[tuple(sorted(word))].append(word)
    return list(res.values())
==============================
def length_of_longest_substring(s):
    seen = {}
    start = max_len = 0
    for i, char in enumerate(s):
        if char in seen and seen[char] >= start:
            start = seen[char] + 1
        seen[char] = i
        max_len = max(max_len, i - start + 1)
    return max_len
==============================
def is_isomorphic(s, t):
    return len(set(zip(s, t))) == len(set(s)) == len(set(t))
=================================
def diagonal_sum(matrix):
    n = len(matrix)
    total = 0
    for i in range(n):
        total += matrix[i][i]
        if i != n - 1 - i:
            total += matrix[i][n - 1 - i]
    return total