class UserNotFoundError(Exception):
    pass

users = ["pravalika", "asha", "deekshitha"]

username = input("Enter username: ")
try:
  if username not in users:
      raise UserNotFoundError("User not found")
  else:
      print(f"Welcome, {username}")
except UserNotFoundError as e:
  print(e)
finally:
  print("custom exception")
=========================================

import calendar
month, day, year = map(int, input().split())
day_name = calendar.day_name[calendar.weekday(year, month, day)]
print(day_name.upper())
======================================
import calendar
month, day, year = map(int, input("Enter date (MM DD YYYY): ").split())
day_index = calendar.weekday(year, month, day)
day_name = calendar.day_name[day_index].upper()
print(day_name)
==============================

def duplicate_letters(sentence):
    strings = sentence.split()

    return any(
        len(set(string)) < len(string)
        for string in strings
    )
print(duplicate_letters("I Love Travelling"))  
print(duplicate_letters("Iam Doing Python")) 
==========================================

class person:
     def getgender(self):
         return "unknown"
class female(person):
    def getgender(self):
        return "female"
class male(person):
     def getgender(self):
        return "male"
f=female()
m=male()
print(f.getgender())
print(m.getgender())
==========================================

string=input()
l_count=0
u_count=0
d_count=0
spl_count=0
vowels=[]
for i in string:
    if i.islower():
        l_count+=1
    elif i.isupper():
        u_count+=1
    elif i.isdigit():
        d_count+=1
    else:
        spl_count+=1
        
print("lower",l_count)
print("upper",u_count)
print("digit",d_count)
print("spcl",spl_count)


def isprime(n):
    if n<=1:
        return False
    for i in range(2,n):
        if n%i==0:
            return False
    return True

-----------------------
n=int(input())
matrix=int(input())
l1=list(range(1,n))
l2=list(map(isprime,l1))
res=[]
# print(l2)
for i in range(len(l1)):
    if l2[i]==True:
        res.append(l1[i])

for i in range(0,len(res),matrix):
    print(res[i],res[i+1])
------------------------------
year=int(input())
if year%4==0 and year%100!=0 or year%400==0:
    print('leap year')
else:
    print('not leap year')
----------------------------------
#transpose for all matrices size of matrices
# l=list(map(int,input().split(" ")))
n=int(input("enter seq numbers"))
l=list(range(1,n+1))
res=[]
matrixsize=int(input("enter matrix dimension"))
for i in range(matrixsize): #looping to count of number of rows or columns
    for j in range(i,len(l),matrixsize):#appending all the ways using the step value that is number of rows
        res.append(l[j])
# in res all the values are stored in transpose order
#below for loop is for print the values in n*n order means 2*2,3*3 etc
for i in range(0,len(l),matrixsize):#
    for j in range(matrixsize):
        print(res[i+j],end=' ')
    print()
===========================
# n=int(input())
# res=bin(n)
# print(res[2:])
n=int(input())
b=""
while n>0:
    b=str(n%2)+b
    n=n//2
print(f"Binary: {b}")
==========================
import math

def perm(n, r):
    return math.factorial(n) // math.factorial(n - r)

def comb(n, r):
    return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))
n=9
r=3
print(perm(n,r))
print(comb(n,r))
=======================
n=int(input())
l1=[]
prd=1
while n>0:
    l1.append(n%10)
    n=n//10
for i in l1:
    prd*=i
res=prd-sum(l1)
print(res)
